@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}
@model MediCare.ViewModel.DoctorViewModel

<html>
<head>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
    <link rel="stylesheet" href="https://code.jquery.com/ui/1.13.2/themes/base/jquery-ui.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://code.jquery.com/ui/1.13.2/jquery-ui.js"></script>
    <link rel="stylesheet" href="~/css/DoctorStyles.css" />
</head>
<body>

    <div class="container">
        <div class="row">
            <div class="col-sm-10"></div>
            <div class="col-sm-2">
                <button type="button" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#exampleModal">Add Doctor</button>
            </div>
        </div>
 
                <table class="table table-striped">
                        <thead>
                            <tr>
                                <th scope="col">S.No</th>
                                <th scope="col">Name</th>
                                <th scope="col">Specialization</th>
                                <th scope="col">Availability</th>
                                <th scope="col"></th>
                            </tr>
                        </thead>
                        <tbody>
                            @for (int i = 0; i < Model.DoctorInfos.Count; i++)
                            {
                                <tr>
                                    <td>@(i + 1)</td>
                                    <td>@Model.DoctorInfos[i].Name</td>
                                    <td>@Model.DoctorInfos[i].Specialization</td>
                                    <td>
                                        <button type="button" class="btn btn-success" onclick="location.href='@Url.Action("Booking", "Doctor", new { id = Model.DoctorInfos[i].ObjectId })'">View</button>

                                    </td>
                                    <td>
                                   @*  <button type="button" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#updateBackdrop" style="border-radius: 20%;"
                                            onclick="prepareUpdateForm('@Model.DoctorInfos[i].ObjectId', '@Model.DoctorInfos[i].Name', '@Model.DoctorInfos[i].Age',
    '@Model.DoctorInfos[i].Email', '@Model.DoctorInfos[i].Specialization', '@Model.DoctorInfos[i].StartTime',
    '@Model.DoctorInfos[i].EndTime', '@Model.DoctorInfos[i].Description', '@Model.DoctorInfos[i].Degree')">
                                        @*edit*@
                                       @*  <svg xmlns="http://www.w3.org/2000/svg" width="17" height="17" fill="currentColor" class="bi bi-pen" viewBox="0 0 16 16">
                                            <path d="m13.498.795.149-.149a1.207 1.207 0 1 1 1.707 1.708l-.149.148a1.5 1.5 0 0 1-.059 2.059L4.854 14.854a.5.5 0 0 1-.233.131l-4 1a.5.5 0 0 1-.606-.606l1-4a.5.5 0 0 1 .131-.232l9.642-9.642a.5.5 0 0 0-.642.056L6.854 4.854a.5.5 0 1 1-.708-.708L9.44.854A1.5 1.5 0 0 1 11.5.796a1.5 1.5 0 0 1 1.998-.001m-.644.766a.5.5 0 0 0-.707 0L1.95 11.756l-.764 3.057 3.057-.764L14.44 3.854a.5.5 0 0 0 0-.708z" />
                                        </svg>
                                    </button> *@
                                    <button type="button" class="btn btn-success edit-doctor-btn btn-sm" data-bs-toggle="modal" data-bs-target="#updateBackdrop" style="border-radius: 20%;"
                                            data-id="@Model.DoctorInfos[i].ObjectId"
                                            data-name="@Model.DoctorInfos[i].Name"
                                            data-age="@Model.DoctorInfos[i].Age"
                                            data-email="@Model.DoctorInfos[i].Email"
                                            data-spec="@Model.DoctorInfos[i].Specialization"
                                            data-start="@Model.DoctorInfos[i].StartTime"
                                            data-end="@Model.DoctorInfos[i].EndTime"
                                            data-desc="@Model.DoctorInfos[i].Description"
                                            data-degree="@Model.DoctorInfos[i].Degree">
                                        
                                        <svg xmlns="http://www.w3.org/2000/svg" width="17" height="17" fill="currentColor" class="bi bi-pen" viewBox="0 0 16 16">
                                            <path d="m13.498.795.149-.149a1.207 1.207 0 1 1 1.707 1.708l-.149.148a1.5 1.5 0 0 1-.059 2.059L4.854 14.854a.5.5 0 0 1-.233.131l-4 1a.5.5 0 0 1-.606-.606l1-4a.5.5 0 0 1 .131-.232l9.642-9.642a.5.5 0 0 0-.642.056L6.854 4.854a.5.5 0 1 1-.708-.708L9.44.854A1.5 1.5 0 0 1 11.5.796a1.5 1.5 0 0 1 1.998-.001m-.644.766a.5.5 0 0 0-.707 0L1.95 11.756l-.764 3.057 3.057-.764L14.44 3.854a.5.5 0 0 0 0-.708z" />
                                        </svg>
                                    </button>

                                    <button type="button" class="btn btn-success btn-sm" style="border-radius: 20%;" onclick="deleteDoctor('@Model.DoctorInfos[i].ObjectId')">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="17" height="17" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                                            <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0z" />
                                            <path d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4zM2.5 3h11V2h-11z" />
                                        </svg>
                                    </button>
                                    </td>

                                   
                                </tr>
                            }
                        </tbody>
                    </table>         
        
    </div>

    <form>
        <div class="modal fade" id="updateBackdrop" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="updateBackdropLabel" style="display: none;">
            <div class="modal-dialog modal-lg modal-dialog-scrollable">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="updateBackdropLabel">Update Doctor Details</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <input type="hidden" id="updateDoctorId" value="">
                        <div class="section mb-3">
                             <div class="collapse show" id="section1Content">
                                <div class="mt-3">
                                    <div class="mb-3">
                                        <label for="updateDocName" class="col-form-label">Name</label>
                                        <input type="text" class="form-control" id="updateDocName">
                                    </div>
                                    <div class="mb-3">
                                        <label for="updateDocEmail" class="col-form-label">Email</label>
                                        <input type="email" class="form-control" id="updateDocEmail">
                                    </div>
                                    <div class="mb-3">
                                        <label for="updateDocAge" class="col-form-label">Age</label>
                                        <input type="number" class="form-control" id="updateDocAge">
                                    </div>
                                    <div class="mb-3">
                                        <label for="updateDocSpec" class="col-form-label">Specialization</label>
                                        <select class="form-select" id="updateSpecDropdown">
                                            <option disabled selected>Select Specialization</option>
                                            @foreach (var spec in Model.SpecializationList)
                                            {
                                                <option value="@spec.ObjectId">@spec.SpecializationName</option>
                                            }
                                        </select>
                                    </div>
                                    <div class="mb-3">
                                        <label for="updateDocDegree" class="col-form-label">Degree</label>
                                        <input type="text" class="form-control" id="updateDocDegree">
                                    </div>


                                    <div class="mb-3">
                                        <label for="updateStartTime" class="col-form-label">Start Time</label>
                                        <input type="time" class="form-control" id="updateStartTime">
                                    </div>
                                    <div class="mb-3">
                                        <label for="updateEndTime" class="col-form-label">End Time</label>
                                        <input type="time" class="form-control" id="updateEndTime">
                                    </div>
                                    <div class="mb-3">
                                        <label for="updateDocDescription" class="col-form-label">Description</label>
                                        <textarea class="form-control " style="min-height:80px;" id="updateDocDescription" rows="3" placeholder=""></textarea>
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label" for="updateDoctorPhoto">Photo</label>
                                        <div class="custom-file-container">
                                            <input type="file" accept="image/*" class="d-none" id="updateDoctorPhoto">
                                           
                                            <button type="button" class="btn btn-light" id="updatedcameraBtn">
                                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-camera" viewBox="0 0 16 16">
                                                    <path d="M15 12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1h1.172a3 3 0 0 0 2.12-.879l.83-.828A1 1 0 0 1 6.827 3h2.344a1 1 0 0 1 .707.293l.828.828A3 3 0 0 0 12.828 5H14a1 1 0 0 1 1 1zM2 4a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2h-1.172a2 2 0 0 1-1.414-.586l-.828-.828A2 2 0 0 0 9.172 2H6.828a2 2 0 0 0-1.414.586l-.828.828A2 2 0 0 1 3.172 4z" />
                                                    <path d="M8 11a2.5 2.5 0 1 1 0-5 2.5 2.5 0 0 1 0 5m0 1a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7M3 6.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0" />
                                                </svg>
                                            </button>
                                        </div>
                                    </div>
                                    
                                    
                                </div>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-success" data-bs-dismiss="modal">Cancel</button>
                            <button type="button" class="btn btn-success" onclick="UpdateDoctor()">Update</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </form>

    <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="DoctorModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="doctorModalLabel">Add Doctor</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>

                </div>
                <div class="modal-body">
                    <form>
                        <div class="mb-3">
                            <label for="docName" class="col-form-label">Name</label>
                            <input type="text" class="form-control" id="docName">
                        </div>
                        <div class="mb-3">
                            <label for="docEmail" class="col-form-label">Email</label>
                            <input type="email" class="form-control" id="docEmail">
                        </div>
                        <div class="mb-3">
                            <label for="docAge" class="col-form-label">Age</label>
                            <input type="number" class="form-control" id="docAge">
                        </div>
                        <div class="mb-3">
                            <label for="docSpec" class="col-form-label">Specialization</label>
                            <select class="form-select" id="specDropdown" >
                            <option disabled selected>Select Specialization</option>
                            @foreach (var spec in Model.SpecializationList)
                            {
                                <option value="@spec.ObjectId">@spec.SpecializationName</option>
                            }
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="docDegree" class="col-form-label">Degree</label>
                            <input type="text" class="form-control" id="docDegree">
                        </div>

                       
                        <div class="mb-3">
                            <label for="startTime" class="col-form-label">Start Time</label>
                            <input type="time" class="form-control" id="startTime">
                        </div>
                        <div class="mb-3">
                            <label for="endTime" class="col-form-label">End Time</label>
                            <input type="time" class="form-control" id="endTime">
                        </div>
                        <div class="mb-3">
                            <label for="docDescription" class="col-form-label">Description</label>
                            <textarea class="form-control " style="min-height:80px;" id="docDescription" rows="3" placeholder=""></textarea>
                        </div>
                        <div class="mb-3">
                            <label class="form-label" for="doctorPhoto">Photo</label>
                            <div class="custom-file-container">
                                <input type="file" accept="image/*" class="d-none" id="doctorPhoto">
                                
                                <button type="button" class="btn btn-light" id="cameraBtn">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-camera" viewBox="0 0 16 16">
                                        <path d="M15 12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1h1.172a3 3 0 0 0 2.12-.879l.83-.828A1 1 0 0 1 6.827 3h2.344a1 1 0 0 1 .707.293l.828.828A3 3 0 0 0 12.828 5H14a1 1 0 0 1 1 1zM2 4a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2h-1.172a2 2 0 0 1-1.414-.586l-.828-.828A2 2 0 0 0 9.172 2H6.828a2 2 0 0 0-1.414.586l-.828.828A2 2 0 0 1 3.172 4z" />
                                        <path d="M8 11a2.5 2.5 0 1 1 0-5 2.5 2.5 0 0 1 0 5m0 1a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7M3 6.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0" />
                                    </svg>
                                </button>
                            </div>
                        </div>
                    </form>

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-success" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-success" onclick="AddNewDoctor()">Add</button>
                </div>
            </div>
        </div>
    </div>
    
</body>

<script>
   
    document.addEventListener('DOMContentLoaded', function () {
        
        const editButtons = document.querySelectorAll('.edit-doctor-btn');
        editButtons.forEach(button => {
            button.addEventListener('click', function () {
                const doctorId = this.getAttribute('data-id');
                const name = this.getAttribute('data-name');
                const age = this.getAttribute('data-age');
                const email = this.getAttribute('data-email');
                const specialization = this.getAttribute('data-spec');
                const startTime = this.getAttribute('data-start');
                const endTime = this.getAttribute('data-end');
                const description = this.getAttribute('data-desc');
                const degree = this.getAttribute('data-degree');

                prepareUpdateForm(doctorId, name, age, email, specialization, startTime, endTime, description, degree);
            });
        });
    });

    document.getElementById('updatedcameraBtn').addEventListener('click', function () {
        document.getElementById('updateDoctorPhoto').click();
    });

    var BupdatedDoctorId = "";

    function prepareUpdateForm(doctorId, name, age, email, specialization, startTime, endTime, description, degree) {
        document.getElementById('updateDoctorId').value = doctorId;
        document.getElementById('updateDocName').value = name || '';
        document.getElementById('updateDocEmail').value = email || '';
        document.getElementById('updateDocAge').value = age || '';
        document.getElementById('updateDocDegree').value = degree || '';
        document.getElementById('updateStartTime').value = startTime || '';
        document.getElementById('updateEndTime').value = endTime || '';
        document.getElementById('updateDocDescription').value = description || '';

       
        const specDropdown = document.getElementById('updateSpecDropdown');
       
        for (let i = 0; i < specDropdown.options.length; i++) {
            if (specDropdown.options[i].textContent === specialization) {
                specDropdown.selectedIndex = i;
                break;
            }
        }

        BupdatedDoctorId = doctorId;
    }

  
    async function UpdateDoctor() {
        const DocName = document.getElementById("updateDocName").value;

        const DocEmail = document.getElementById("updateDocEmail").value;
        const DocAge = document.getElementById("updateDocAge").value;
        const DocSpec = document.getElementById("updateSpecDropdown");
        const selectedOption = DocSpec.options[DocSpec.selectedIndex];
        const DocSpecId = selectedOption.value;
        console.log(DocSpecId);
        const DocDegree = document.getElementById("updateDocDegree").value;
        const DocStartTime = document.getElementById("updateStartTime").value;
        const DocEndTime = document.getElementById("updateEndTime").value;
        const docDesc = document.getElementById("updateDocDescription").value;
        const docImage = document.getElementById('updateDoctorPhoto');
        const docPhotoFile = docImage.files[0];

        const docPhotoBase64 = docPhotoFile ? await fileToBase64(docPhotoFile) : null;

        console.log(DocEndTime);

        const data = {
            UpdateDocId: BupdatedDoctorId,
            Name: DocName,
            Email: DocEmail,
            Age: DocAge,
            Specialization: DocSpecId,
            StartTime: DocStartTime,
            EndTime: DocEndTime,
            Degree: DocDegree,
            Description: docDesc,
            DoctorImage: docPhotoBase64
        };

        try {
            const jsonData = JSON.stringify(data);
            console.log("Sending data to server:", data);
            const response = await fetch('/Doctor/UpdateDoctor', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json; charset=utf-8'
                },
                body: jsonData
            });

            if (!response.ok) {
                const errorText = await response.text();
                console.error('Server response:', errorText);
                throw new Error('Failed to update Doctor details');
            }

            window.location.reload();
            console.log('Doctor details updated successfully');
        } catch (error) {
            console.error('Error:', error);
            window.location.reload();
        }
    }


    async function deleteDoctor(doctorId) {
        

        const data = {
            UpdateDocId: doctorId
            
        };

        try {
            const jsonData = JSON.stringify(data);
            console.log("Sending data to server:", data);
            const response = await fetch('/Doctor/DeleteDoctor', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json; charset=utf-8'
                },
                body: jsonData
            });

            if (!response.ok) {
                const errorText = await response.text();
                console.error('Server response:', errorText);
                throw new Error('Failed to add Doctor');
            }

            window.location.reload();
            console.log('Doctor added successfully');
        } catch (error) {
            console.error('Error:', error);
            window.location.reload();
        }
    }



    document.getElementById('cameraBtn').addEventListener('click', function () {
        document.getElementById('doctorPhoto').click(); 
    });

    async function AddNewDoctor() {
        const DocName = document.getElementById("docName").value;
        
        const DocEmail = document.getElementById("docEmail").value;
        const DocAge = document.getElementById("docAge").value;
        const DocSpec = document.getElementById("specDropdown");
        const selectedOption = DocSpec.options[DocSpec.selectedIndex];
        const DocSpecId = selectedOption.value;
        console.log(DocSpecId);
        const DocDegree = document.getElementById("docDegree").value;
        const DocStartTime = document.getElementById("startTime").value;
        const DocEndTime = document.getElementById("endTime").value;
        const docDesc = document.getElementById("docDescription").value;
        const docImage = document.getElementById('doctorPhoto');
        const docPhotoFile = docImage.files[0];

        const docPhotoBase64 = docPhotoFile ? await fileToBase64(docPhotoFile) : null;
       

        console.log(DocEndTime);

        const data = {
            Name: DocName,
            Email: DocEmail,
            Age: DocAge,
            Specialization: DocSpecId,
            StartTime: DocStartTime,
            EndTime: DocEndTime,
            Degree: DocDegree,
            Description: docDesc,
            DoctorImage: docPhotoBase64
        };

        try {
            const jsonData = JSON.stringify(data);
            console.log("Sending data to server:", data);
            const response = await fetch('/Doctor/AddDoctor', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json; charset=utf-8'
                },
                body: jsonData
            });

            if (!response.ok) {
                const errorText = await response.text();
                console.error('Server response:', errorText);
                throw new Error('Failed to add Doctor');
            }

            window.location.reload();
            console.log('Doctor added successfully');
        } catch (error) {
            console.error('Error:', error);
            window.location.reload();
        }
    }

    function fileToBase64(file) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.onload = () => resolve(reader.result);
            reader.onerror = error => reject(error);
            reader.readAsDataURL(file);
        });
    }
  
</script>
</html>

