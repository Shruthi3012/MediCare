@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}


@model List<MediCare.ViewModel.AppointmentsViewModel>

<head>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
    <link rel="stylesheet" href="https://code.jquery.com/ui/1.13.2/themes/base/jquery-ui.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://code.jquery.com/ui/1.13.2/jquery-ui.js"></script>

</head>
<body>
    <table class="table table-striped">
        <thead>
            <tr>
                <th scope="col">S.No</th>
                <th scope="col">Doctor Name</th>
                <th scope="col">Specialization</th>
                <th scope="col">Patient Name</th>
                <th scope="col">Date</th>
                <th scope="col">Time</th>
                <th scope="col"></th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < Model.Count; i++)
            {
                <tr>
                    <td>@(i + 1)</td>
                    <td>@Model[i].DoctorName</td>
                    <td>@Model[i].Specialization</td>
                    <td>@Model[i].PatientName</td>
                    <td>@Model[i].BookedDate</td>
                    <td>@Model[i].BookedTime</td>
                    <td>
                        <button type="button" class="btn btn-success btn-sm" style="border-radius: 20%;"
                                onclick="location.href='@Url.Action("PrescriptionDetails", "Doctor", new { doctorId = Model[i].DoctorId, patientId = Model[i].PatientId, appointmentId = Model[i].AppId })'">
                            <svg xmlns="http://www.w3.org/2000/svg" width="23" height="23" fill="currentColor" class="bi bi-info-circle" viewBox="0 0 16 16">
                                <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14m0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16" />
                                <path d="m8.93 6.588-2.29.287-.082.38.45.083c.294.07.352.176.288.469l-.738 3.468c-.194.897.105 1.319.808 1.319.545 0 1.178-.252 1.465-.598l.088-.416c-.2.176-.492.246-.686.246-.275 0-.375-.193-.304-.533zM9 4.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0" />
                            </svg>
                        </button>

                        <button type="button" class="btn btn-success btn-sm"
                                data-bs-toggle="modal"
                                data-bs-target="#updateBackdrop"
                                data-appid="@Model[i].AppId"
                                data-doctorid="@Model[i].DoctorId"
                                data-patientid="@Model[i].PatientId"
                                data-bookeddate="@Model[i].BookedDate"
                                data-bookedtime="@Model[i].BookedTime"
                                data-patientname="@Model[i].PatientName"
                                data-patientemail ="@Model[i].PatientEmail"
                                data-patientphone ="@Model[i].PatientPhone"
                                data-patientage = "@Model[i].PatientAge"
                                data-patientdescription ="@Model[i].Description"
                                onclick="openUpdateModal('@Model[i].AppId', '@Model[i].DoctorId', '@Model[i].PatientId', '@Model[i].BookedDate', '@Model[i].BookedTime', 
'@Model[i].PatientName', '@Model[i].PatientEmail', '@Model[i].PatientPhone', '@Model[i].PatientAge', '@Model[i].Description')">
                            <svg xmlns="http://www.w3.org/2000/svg" width="17" height="17" fill="currentColor" class="bi bi-pen" viewBox="0 0 16 16">
                                <path d="m13.498.795.149-.149a1.207 1.207 0 1 1 1.707 1.708l-.149.148a1.5 1.5 0 0 1-.059 2.059L4.854 14.854a.5.5 0 0 1-.233.131l-4 1a.5.5 0 0 1-.606-.606l1-4a.5.5 0 0 1 .131-.232l9.642-9.642a.5.5 0 0 0-.642.056L6.854 4.854a.5.5 0 1 1-.708-.708L9.44.854A1.5 1.5 0 0 1 11.5.796a1.5 1.5 0 0 1 1.998-.001m-.644.766a.5.5 0 0 0-.707 0L1.95 11.756l-.764 3.057 3.057-.764L14.44 3.854a.5.5 0 0 0 0-.708z" />
                            </svg>
                        </button>


                        <button type="button" class="btn btn-success btn-sm" style="border-radius: 20%;" onclick="deleteAppointment('@Model[i].AppId')">
                            <svg xmlns="http://www.w3.org/2000/svg" width="17" height="17" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                                <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0z" />
                                <path d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4zM2.5 3h11V2h-11z" />
                            </svg>
                        </button>

                       
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div class="modal fade" id="updateBackdrop" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="updateBackdropLabel" style="display: none;">
        <div class="modal-dialog modal-lg modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="updateBackdropLabel">Update Appointment</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <input type="hidden" id="updateAppointmentId" value="">
                    <input type="hidden" id="updateDoctorId" value="">
                    <input type="hidden" id="updatePatientId" value="">
                    <div class="section mb-3">
                        <div class="collapse show" id="section1Content">
                            <div class="mt-3">
                                
                                <div class="mb-3">
                                    <label for="updateAppSlot" class="col-form-label">Current Time Slot</label>
                                    <input type="text" class="form-control" id="updateAppSlot" readonly>
                                </div>
                                <div class="mb-3">
                                    <label for="updateAppDate" class="col-form-label">Appointment Date</label>
                                    <input type="date" class="form-control" id="updateAppDate">
                                </div>
                                <div class="mb-3">
                                    <label for="availableTimeSlots" class="col-form-label">Available Time Slots</label>
                                    <div id="availableTimeSlots" class="time-slots-container">
                                        <div class="alert alert-info">Select a date to view available time slots</div>
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <label for="updatePatientName" class="col-form-label">Patient Name</label>
                                    <input type="text" class="form-control" id="updatePatientName">
                                </div>
                                <div class="mb-3">
                                    <label for="updatePatientEmail" class="col-form-label">Patient Email</label>
                                    <input type="email" class="form-control" id="updatePatientEmail">
                                </div>
                                <div class="mb-3">
                                    <label for="updatePatientPhone" class="col-form-label">Patient Phone</label>
                                    <input type="text" class="form-control" id="updatePatientPhone">
                                </div>
                                <div class="mb-3">
                                    <label for="updatePatientAge" class="col-form-label">Patient Age</label>
                                    <input type="number" class="form-control" id="updatePatientAge">
                                </div>
                                <div class="mb-3">
                                    <label for="updatePatDescription" class="col-form-label">Patient Description</label>
                                    <textarea class="form-control" style="min-height:80px;" id="updatePatDescription" rows="3" placeholder=""></textarea>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-success" onclick="updateAppointment()">Update</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>



        document.head.insertAdjacentHTML('beforeend', `
                <style>
                    .time-slots-container {
                        display: flex;
                        flex-wrap: wrap;
                        gap: 10px;
                        margin-top: 10px;
                    }
                    .time-slot {
                        padding: 8px 15px;
                        border: 1px solid #ccc;
                        border-radius: 5px;
                        cursor: pointer;
                        transition: all 0.3s;
                    }
                    .time-slot:hover {
                        background-color: #e9f7ef;
                        border-color: #28a745;
                    }
                    .time-slot.selected {
                        background-color: #28a745;
                        color: white;
                        border-color: #28a745;
                    }
                    .time-slot.unavailable {
                        background-color: #f8f9fa;
                        color: #6c757d;
                        border-color: #ddd;
                        cursor: not-allowed;
                        opacity: 0.7;
                    }
                </style>
            `);

        let selectedTimeSlot = null;
        let appId = null;
        let docId = null;
        let patId = null;
        let formattedDate = '';
        function openUpdateModal(appointmentId, doctorId, patientId, bookedDate, bookedTime, patientName, patientemail, patientphone, patientage, patientdescription) {
            
            document.getElementById('updateAppointmentId').value = appointmentId;
            appId = appointmentId;
            document.getElementById('updateDoctorId').value = doctorId;
            document.getElementById('updatePatientId').value = patientId;

            docId = doctorId;
            patId = patientId;
            document.getElementById('updatePatientName').value = patientName;

            document.getElementById('updatePatientEmail').value = patientemail;
            document.getElementById('updatePatientPhone').value = patientphone;
            document.getElementById('updatePatientAge').value = patientage;
            document.getElementById('updatePatDescription').value = patientdescription;

            console.log(patientdescription);
            
            const dateParts = bookedDate.split('/');
            let formattedDate = '';
            if (dateParts.length === 3) {
                formattedDate = `${dateParts[2]}-${dateParts[0].padStart(2, '0')}-${dateParts[1].padStart(2, '0')}`;
            } else {
                const dateObj = new Date(bookedDate);
                if (!isNaN(dateObj.getTime())) {
                    formattedDate = dateObj.toISOString().split('T')[0];
                }
            }

            document.getElementById('updateAppDate').value = formattedDate;
            document.getElementById('updateAppSlot').value = `${bookedDate} - ${bookedTime}`;

            loadAvailableTimeSlots(doctorId, formattedDate, bookedTime);
        }

        function loadAvailableTimeSlots(doctorId, date, currentTimeSlot) {
            const timeSlotContainer = document.getElementById('availableTimeSlots');
            timeSlotContainer.innerHTML = '<div class="alert alert-info">Loading available time slots...</div>';

            fetch(`/Doctor/GetAvailableTimeSlots?doctorId=${doctorId}&date=${date}`)
                .then(response => response.json())
                .then(data => {
                    timeSlotContainer.innerHTML = '';

                    if (data.length === 0) {
                        timeSlotContainer.innerHTML = '<div class="alert alert-warning">No available time slots for this date</div>';
                        return;
                    }

                    data.forEach(slot => {
                        const slotElement = document.createElement('div');
                        slotElement.className = 'time-slot';
                        slotElement.textContent = slot.time;
                        slotElement.dataset.slotId = slot.id;

                       
                        if (slot.time === currentTimeSlot) {
                            slotElement.classList.add('selected');
                            selectedTimeSlot = slot.id;
                        }

                        if (slot.isBooked && slot.time !== currentTimeSlot) {
                            slotElement.classList.add('unavailable');
                            slotElement.title = 'This slot is already booked';
                        } else {
                            slotElement.addEventListener('click', function () {
                                if (!this.classList.contains('unavailable')) {
                                    document.querySelectorAll('.time-slot.selected').forEach(el => {
                                        el.classList.remove('selected');
                                    });

                                    this.classList.add('selected');
                                    selectedTimeSlot = this.dataset.slotId;

                                    document.getElementById('updateAppSlot').value = this.textContent;
                                }
                            });
                        }

                        timeSlotContainer.appendChild(slotElement);
                    });
                })
                .catch(error => {
                    console.error('Error loading time slots:', error);
                    timeSlotContainer.innerHTML = '<div class="alert alert-danger">Error loading time slots. Please try again.</div>';
                });
        }

        document.getElementById('updateAppDate').addEventListener('change', function () {
            const doctorId = document.getElementById('updateDoctorId').value;
            const currentTimeSlot = document.getElementById('updateAppSlot').value;
            loadAvailableTimeSlots(doctorId, this.value, currentTimeSlot);
        });


        async function updateAppointment() {

            const appointmentId = appId;
            const doctorId = docId;
            const patientId = patId;
            const appointmentDate = document.getElementById('updateAppDate').value;
            const timeSlot = document.getElementById('updateAppSlot').value;
            const patientName = document.getElementById('updatePatientName').value;
            const patientEmail = document.getElementById('updatePatientEmail').value;
            const patientPhone = document.getElementById('updatePatientPhone').value;
            const patientAge = document.getElementById('updatePatientAge').value;
            const patientDescription = document.getElementById('updatePatDescription').value || '';

            const data = {
                AppId: appId,
                DoctorId: docId,
                BookedTime: timeSlot,
                BookedDate: appointmentDate,
                Description: patientDescription,
                PatientName: patientName,
                PatientId: patId,
                PatientAge: patientAge,
                PatientPhone: patientPhone,
                PatientEmail: patientEmail
            };

            try {
                const jsonData = JSON.stringify(data);
                console.log("Sending data to server:", data);
                const response = await fetch('/Doctor/UpdateAppointment', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json; charset=utf-8'
                    },
                    body: jsonData
                });

                if (!response.ok) {
                    const errorText = await response.text();
                    console.error('Server response:', errorText);
                    throw new Error('Failed to update Appointment details');
                }

                window.location.reload();
                console.log('Appointment updated successfully');
            } catch (error) {
                console.error('Error:', error);
                window.location.reload();
            }
        }



        async function deleteAppointment(Id) {

           

            const data = {
                AppId: Id
                
            };

            try {
                const jsonData = JSON.stringify(data);
                console.log("Sending data to server:", data);
                const response = await fetch('/Doctor/DeleteAppointment', {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json; charset=utf-8'
                    },
                    body: jsonData
                });

                if (!response.ok) {
                    const errorText = await response.text();
                    console.error('Server response:', errorText);
                    throw new Error('Failed to update Appointment details');
                }

                window.location.reload();
                console.log('Appointment updated successfully');
            } catch (error) {
                console.error('Error:', error);
                window.location.reload();
            }
        }


        function openReviewModal(doctorId) {
        $('#doctorId').val(doctorId);
        $('#patientId').val(patientId);
        var reviewModal = new bootstrap.Modal(document.getElementById('reviewModal'));
        reviewModal.show();
    }

    $('#reviewForm').on('submit', function (e) {
        e.preventDefault();

        var reviewData = {
            doctorId: $('#doctorId').val(),
            patientId: $('#patientId').val(),
            rating: parseInt($('#rating').val()),
            comments: $('#comments').val()
        };

        $.ajax({
            type: "POST",
            url: "/Doctor/SubmitReview",
            contentType: "application/json",
            data: JSON.stringify(reviewData),
            success: function (response) {
                alert("Review submitted successfully!");
                $('#reviewModal').modal('hide');
            },
            error: function () {
                alert("Error submitting review.");
            }
        });
    });     
          
    </script>
</body>