@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}
@model List<MediCare.Models.Specialization>

<html>
<head>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"></script>
</head>
<body>

    

    <button type="button" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#exampleModal">Add Specialization</button>

    <!-- Modal -->
    <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="specializationModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="specializationModalLabel">Add Specialization</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" onclick="resetModal()"></button>
                </div>
                <div class="modal-body">
                    <form>
                        <input type="hidden" id="editSpecId" />
                        <div class="mb-3">
                            <label for="specNameid" class="col-form-label">Specialization</label>
                            <input type="text" class="form-control" id="specNameid">
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" onclick="resetModal()">Cancel</button>
                    <button type="button" class="btn btn-primary" id="modalActionBtn" onclick="addSpecialization()">Add</button>
                </div>
            </div>
        </div>
    </div>


    <table class="table">
        <thead>
            <tr>
                <th scope="col">S.No</th>
                <th scope="col">Specialization</th>
                <th scope="col">Actions</th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < Model.Count; i++)
            {
                <tr>
                    <td>@(i + 1)</td> 
                    <td>@Model[i].SpecializationName</td>
                    <td>
                       @* <button class="btn btn-danger" onclick="deleteSpecialization('@Model[i].ObjectId')">Delete</button> *@
                        <button type="button" class="btn btn-success" style="border-radius: 20%;" onclick="editSpecialization('@Model[i].ObjectId', '@Model[i].SpecializationName')">
                            <svg xmlns="http://www.w3.org/2000/svg" width="17" height="17" fill="currentColor" class="bi bi-pen" viewBox="0 0 16 16">
                                <path d="m13.498.795.149-.149a1.207 1.207 0 1 1 1.707 1.708l-.149.148a1.5 1.5 0 0 1-.059 2.059L4.854 14.854a.5.5 0 0 1-.233.131l-4 1a.5.5 0 0 1-.606-.606l1-4a.5.5 0 0 1 .131-.232l9.642-9.642a.5.5 0 0 0-.642.056L6.854 4.854a.5.5 0 1 1-.708-.708L9.44.854A1.5 1.5 0 0 1 11.5.796a1.5 1.5 0 0 1 1.998-.001m-.644.766a.5.5 0 0 0-.707 0L1.95 11.756l-.764 3.057 3.057-.764L14.44 3.854a.5.5 0 0 0 0-.708z" />
                            </svg>
                        </button>
                        <button type="button" class="btn btn-success" style="border-radius: 20%;" onclick="deleteSpecialization('@Model[i].ObjectId')">
                            <svg xmlns="http://www.w3.org/2000/svg" width="17" height="17" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                                <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0z" />
                                <path d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4zM2.5 3h11V2h-11z" />
                            </svg>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

</body>

<script>

    async function addSpecialization()
    {
        const specName = document.getElementById("specNameid").value;
        console.log(specName);

        const data = {
            SpecializationName: specName
        };

        try {
            const jsonData = JSON.stringify(data);
            const response = await fetch('/Specialization/AddSpec', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json; charset=utf-8'
                },
                body: jsonData
            });

            if (!response.ok) {
                const errorText = await response.text();
                console.error('Server response:', errorText);
                throw new Error('Failed to save specialization');
            }

            window.location.reload();
            console.log('Specialization saved successfully');
        } catch(error) {
            console.error('Error:', error);
            window.location.reload();
        }
    }

    async function deleteSpecialization(id) {
        if (!confirm("Are you sure you want to delete this specialization?")) {
            return;
        }

        try {
            const response = await fetch(`/Specialization/DeleteSpec?id=${id}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                const errorText = await response.text();
                console.error('Error:', errorText);
                throw new Error('Failed to delete specialization');
            }

            window.location.reload(); 
        } catch (error) {
            console.error('Error:', error);
        }
    }


    function editSpecialization(id, name) {
        document.getElementById("editSpecId").value = id;
        document.getElementById("specNameid").value = name;

        document.getElementById("specializationModalLabel").innerText = "Edit Specialization";
        const actionBtn = document.getElementById("modalActionBtn");
        actionBtn.innerText = "Save";
        actionBtn.setAttribute("onclick", "updateSpecialization()");

        var myModal = new bootstrap.Modal(document.getElementById('exampleModal'));
        myModal.show();
    }

    function resetModal() {
        document.getElementById("editSpecId").value = "";
        document.getElementById("specNameid").value = "";

        document.getElementById("specializationModalLabel").innerText = "Add Specialization";
        const actionBtn = document.getElementById("modalActionBtn");
        actionBtn.innerText = "Add";
        actionBtn.setAttribute("onclick", "addSpecialization()");
    }

    async function updateSpecialization() {
        const specId = document.getElementById("editSpecId").value;
        const specName = document.getElementById("specNameid").value;

        const data = {
            ObjectId: specId,
            SpecializationName: specName
        };

        try {
            const response = await fetch('/Specialization/EditSpec', {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json; charset=utf-8'
                },
                body: JSON.stringify(data)
            });

            if (!response.ok) {
                const errorText = await response.text();
                console.error('Server error:', errorText);
                throw new Error('Failed to update specialization');
            }

            window.location.reload();
        } catch (error) {
            console.error('Error:', error);
        }
    }

</script>

</html>
